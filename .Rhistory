if (!is.na(aff_area[j])) {
fi = paste("shape/",aff_area[j], ".geojson", sep="")
# print(fi)
sr <- geojson_read(fi,  what = "sp")
if (cnt == 1){
a <- sr
cnt = 2
} else {
a <- rbind(a, sr)
}
# srs <- sr@polygons
# sr = Polygon(cbind(raw_data$geometry$coordinates[,,1], raw_data$geometry$coordinates[,,2]))
# srs = Polygons(list(sr), paste(i))
}
}
poly = append(poly, a)
}
} else {
# a = raw_data$features$geometry[i]
# raw_data$features$geometry$coordinates[[i]]
sr = Polygon(cbind(raw_data$features$geometry$coordinates[[i]][,,1],
raw_data$features$geometry$coordinates[[i]][,,2]))
# srs = Polygons(list(sr), paste(i))
poly = append(poly, sr)
}
}
# sp <- SpatialPolygons(poly)
# sps <- SpatialPolygonsDataFrame(sp,
#                                 data.frame(
#                                   X = rep(1, num_alerts)
#                                   )
#                                 )
# al <- raw_data$features$properties$event[is.na(raw_data$features$geometry$type)]
al <- raw_data$features$properties$event
return(list(alerts=al, shapes=poly))
}
df <- api_warning_call_2()
type(df$shapes[1])
typeof(df$shapes[1])
typeof(df$shapes[2])
api_alerts_plot(df, nyc_data)
length(df$alerts)
df$alerts
length(df$shapes)
api_alerts_plot <- function(alert_data, nyc_data){
pal = c("Small Craft Advisory"="#d8bfd8",
"Rip Current Statement"="#40e0d0",
"Air Quality Alert"="#808080",
"Marine Weather Statement"="#ffefd5",
"Special Marine Warning"="#ffa500")
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)
for (i in 1:length(alert_data$alerts)){
print(i)
m <- leaflet::addPolygons(m, data = alert_data$shapes[[i]],
fillColor = pal[[alert_data$alerts[[i]]]], fillOpacity = .9,
color = "white", weight = .5,
)
}
m <- addPolylines(m, data = nyc_data,
weight = .5, color = "blue", alpha = .5)
return(m)
}
api_alerts_plot(df, nyc_data)
api_alerts_plot <- function(alert_data, nyc_data){
pal = c("Small Craft Advisory"="#d8bfd8",
"Rip Current Statement"="#40e0d0",
"Air Quality Alert"="#808080",
"Marine Weather Statement"="#ffefd5",
"Special Marine Warning"="#ffa500")
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)
for (i in 1:length(alert_data$alerts)){
print(i)
m <- leaflet::addPolygons(m, data = alert_data$shapes[[i]],
fillColor = pal[[alert_data$alerts[[i]]]], fillOpacity = .9,
color = "white", weight = .5,
)
}
m <- addPolylines(m, data = nyc_data,
weight = .5, color = "blue")
return(m)
}
api_alerts_plot <- function(alert_data, nyc_data){
pal = c("Small Craft Advisory"="#d8bfd8",
"Rip Current Statement"="#40e0d0",
"Air Quality Alert"="#808080",
"Marine Weather Statement"="#ffefd5",
"Special Marine Warning"="#ffa500")
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.PositronNoLabels)
for (i in 1:length(alert_data$alerts)){
print(i)
m <- leaflet::addPolygons(m, data = alert_data$shapes[[i]],
fillColor = pal[[alert_data$alerts[[i]]]], fillOpacity = .9,
color = "white", weight = .5,
)
}
m <- addPolylines(m, data = nyc_data,
weight = .5, color = "blue")
return(m)
}
api_alerts_plot(df, nyc_data)
runApp(".")
runApp(".")
runApp(".")
runApp(".")
df <- api_alerts_plot()
df <- api_warning_call_2()
zones = c("NYZ072", "NYZ073", "NYZ074", "NYZ075", "NYZ176", "NYZ178",
"ANZ335", "ANZ338", "ANZ355")
alerts = c()
shaps = c()
query <- "https://api.weather.gov/alerts/active?zone=NYZ072,NYZ073,NYZ074,NYZ075,NYZ176,NYZ178,ANZ335,ANZ355,ANZ338"
cnt = 1
raw_data = NA
while (length(raw_data) == 1 && cnt < 2) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
num_alerts = length(raw_data$features$geometry$type)
poly = list()
for (i in 1:num_alerts){
if (is.na(raw_data$features$geometry$type[i])){
aff_area <- raw_data$features$properties$geocode$UGC[[i]]
aff_area <- intersect(aff_area, zones)
if (length(aff_area) != 0){
a <- NA
cnt <- 1
for (j in 1:length(aff_area)){
if (!is.na(aff_area[j])) {
fi = paste("shape/",aff_area[j], ".geojson", sep="")
# print(fi)
sr <- geojson_read(fi,  what = "sp")
if (cnt == 1){
a <- sr
cnt = 2
} else {
a <- rbind(a, sr)
}
# srs <- sr@polygons
# sr = Polygon(cbind(raw_data$geometry$coordinates[,,1], raw_data$geometry$coordinates[,,2]))
# srs = Polygons(list(sr), paste(i))
}
}
poly = append(poly, a)
}
} else {
# a = raw_data$features$geometry[i]
# raw_data$features$geometry$coordinates[[i]]
sr = Polygon(cbind(raw_data$features$geometry$coordinates[[i]][,,1],
raw_data$features$geometry$coordinates[[i]][,,2]))
# srs = Polygons(list(sr), paste(i))
poly = append(poly, sr)
}
}
# sp <- SpatialPolygons(poly)
# sps <- SpatialPolygonsDataFrame(sp,
#                                 data.frame(
#                                   X = rep(1, num_alerts)
#                                   )
#                                 )
# al <- raw_data$features$properties$event[is.na(raw_data$features$geometry$type)]
al <- raw_data$features$properties$event
df <- api_warning_call_2()
api_warning_call_2()
api_warning_call_2()
api_warning_call_2 <- function(){
zones = c("NYZ072", "NYZ073", "NYZ074", "NYZ075", "NYZ176", "NYZ178",
"ANZ335", "ANZ338", "ANZ355")
alerts = c()
shaps = c()
print("h")
query <- "https://api.weather.gov/alerts/active?zone=NYZ072,NYZ073,NYZ074,NYZ075,NYZ176,NYZ178,ANZ335,ANZ355,ANZ338"
cnt = 1
raw_data = NA
while (length(raw_data) == 1 && cnt < 2) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
num_alerts = length(raw_data$features$geometry$type)
poly = list()
for (i in 1:num_alerts){
print("h")
if (is.na(raw_data$features$geometry$type[i])){
aff_area <- raw_data$features$properties$geocode$UGC[[i]]
aff_area <- intersect(aff_area, zones)
if (length(aff_area) != 0){
a <- NA
cnt <- 1
for (j in 1:length(aff_area)){
if (!is.na(aff_area[j])) {
fi = paste("shape/",aff_area[j], ".geojson", sep="")
# print(fi)
sr <- geojson_read(fi,  what = "sp")
if (cnt == 1){
a <- sr
cnt = 2
} else {
a <- rbind(a, sr)
}
# srs <- sr@polygons
# sr = Polygon(cbind(raw_data$geometry$coordinates[,,1], raw_data$geometry$coordinates[,,2]))
# srs = Polygons(list(sr), paste(i))
}
}
poly = append(poly, a)
}
} else {
# a = raw_data$features$geometry[i]
# raw_data$features$geometry$coordinates[[i]]
sr = Polygon(cbind(raw_data$features$geometry$coordinates[[i]][,,1],
raw_data$features$geometry$coordinates[[i]][,,2]))
# srs = Polygons(list(sr), paste(i))
poly = append(poly, sr)
}
}
# sp <- SpatialPolygons(poly)
# sps <- SpatialPolygonsDataFrame(sp,
#                                 data.frame(
#                                   X = rep(1, num_alerts)
#                                   )
#                                 )
# al <- raw_data$features$properties$event[is.na(raw_data$features$geometry$type)]
al <- raw_data$features$properties$event
return(list(alerts=al, shapes=poly))
}
api_warning_call_2()
api_warning_call_2 <- function(){
zones = c("NYZ072", "NYZ073", "NYZ074", "NYZ075", "NYZ176", "NYZ178",
"ANZ335", "ANZ338", "ANZ355")
alerts = c()
shaps = c()
print("h")
query <- "https://api.weather.gov/alerts/active?zone=NYZ072,NYZ073,NYZ074,NYZ075,NYZ176,NYZ178,ANZ335,ANZ355,ANZ338"
cnt = 1
raw_data = NA
while (length(raw_data) == 1 && cnt < 8) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
num_alerts = length(raw_data$features$geometry$type)
poly = list()
for (i in 1:num_alerts){
print("h")
if (is.na(raw_data$features$geometry$type[i])){
aff_area <- raw_data$features$properties$geocode$UGC[[i]]
aff_area <- intersect(aff_area, zones)
if (length(aff_area) != 0){
a <- NA
cnt <- 1
for (j in 1:length(aff_area)){
if (!is.na(aff_area[j])) {
fi = paste("shape/",aff_area[j], ".geojson", sep="")
# print(fi)
sr <- geojson_read(fi,  what = "sp")
if (cnt == 1){
a <- sr
cnt = 2
} else {
a <- rbind(a, sr)
}
# srs <- sr@polygons
# sr = Polygon(cbind(raw_data$geometry$coordinates[,,1], raw_data$geometry$coordinates[,,2]))
# srs = Polygons(list(sr), paste(i))
}
}
poly = append(poly, a)
}
} else {
# a = raw_data$features$geometry[i]
# raw_data$features$geometry$coordinates[[i]]
sr = Polygon(cbind(raw_data$features$geometry$coordinates[[i]][,,1],
raw_data$features$geometry$coordinates[[i]][,,2]))
# srs = Polygons(list(sr), paste(i))
poly = append(poly, sr)
}
}
# sp <- SpatialPolygons(poly)
# sps <- SpatialPolygonsDataFrame(sp,
#                                 data.frame(
#                                   X = rep(1, num_alerts)
#                                   )
#                                 )
# al <- raw_data$features$properties$event[is.na(raw_data$features$geometry$type)]
al <- raw_data$features$properties$event
return(list(alerts=al, shapes=poly))
}
api_warning_call_2()
api_warning_call_2 <- function(){
zones = c("NYZ072", "NYZ073", "NYZ074", "NYZ075", "NYZ176", "NYZ178",
"ANZ335", "ANZ338", "ANZ355")
alerts = c()
shaps = c()
print("h")
query <- "https://api.weather.gov/alerts/active?zone=NYZ072,NYZ073,NYZ074,NYZ075,NYZ176,NYZ178,ANZ335,ANZ355,ANZ338"
cnt = 1
raw_data = NA
while (length(raw_data) == 1 && cnt < 8) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
print("h")
num_alerts = length(raw_data$features$geometry$type)
poly = list()
for (i in 1:num_alerts){
print("h")
if (is.na(raw_data$features$geometry$type[i])){
aff_area <- raw_data$features$properties$geocode$UGC[[i]]
aff_area <- intersect(aff_area, zones)
if (length(aff_area) != 0){
a <- NA
cnt <- 1
for (j in 1:length(aff_area)){
if (!is.na(aff_area[j])) {
fi = paste("shape/",aff_area[j], ".geojson", sep="")
# print(fi)
sr <- geojson_read(fi,  what = "sp")
if (cnt == 1){
a <- sr
cnt = 2
} else {
a <- rbind(a, sr)
}
# srs <- sr@polygons
# sr = Polygon(cbind(raw_data$geometry$coordinates[,,1], raw_data$geometry$coordinates[,,2]))
# srs = Polygons(list(sr), paste(i))
}
}
poly = append(poly, a)
}
} else {
# a = raw_data$features$geometry[i]
# raw_data$features$geometry$coordinates[[i]]
sr = Polygon(cbind(raw_data$features$geometry$coordinates[[i]][,,1],
raw_data$features$geometry$coordinates[[i]][,,2]))
# srs = Polygons(list(sr), paste(i))
poly = append(poly, sr)
}
}
# sp <- SpatialPolygons(poly)
# sps <- SpatialPolygonsDataFrame(sp,
#                                 data.frame(
#                                   X = rep(1, num_alerts)
#                                   )
#                                 )
# al <- raw_data$features$properties$event[is.na(raw_data$features$geometry$type)]
al <- raw_data$features$properties$event
return(list(alerts=al, shapes=poly))
}
api_warning_call_2()
raw_data <- jsonlite::fromJSON(query)
raw_data$features$geometry
api_warning_call_2 <- function(){
zones = c("NYZ072", "NYZ073", "NYZ074", "NYZ075", "NYZ176", "NYZ178",
"ANZ335", "ANZ338", "ANZ355")
alerts = c()
shaps = c()
print("h")
query <- "https://api.weather.gov/alerts/active?zone=NYZ072,NYZ073,NYZ074,NYZ075,NYZ176,NYZ178,ANZ335,ANZ355,ANZ338"
cnt = 1
raw_data = NA
while (length(raw_data) == 1 && cnt < 8) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
print("h")
num_alerts = length(raw_data$features$geometry)
poly = list()
for (i in 1:num_alerts){
print("h")
if (is.na(raw_data$features$geometry[i])){
aff_area <- raw_data$features$properties$geocode$UGC[[i]]
aff_area <- intersect(aff_area, zones)
if (length(aff_area) != 0){
a <- NA
cnt <- 1
for (j in 1:length(aff_area)){
if (!is.na(aff_area[j])) {
fi = paste("shape/",aff_area[j], ".geojson", sep="")
# print(fi)
sr <- geojson_read(fi,  what = "sp")
if (cnt == 1){
a <- sr
cnt = 2
} else {
a <- rbind(a, sr)
}
# srs <- sr@polygons
# sr = Polygon(cbind(raw_data$geometry$coordinates[,,1], raw_data$geometry$coordinates[,,2]))
# srs = Polygons(list(sr), paste(i))
}
}
poly = append(poly, a)
}
} else {
# a = raw_data$features$geometry[i]
# raw_data$features$geometry$coordinates[[i]]
sr = Polygon(cbind(raw_data$features$geometry$coordinates[[i]][,,1],
raw_data$features$geometry$coordinates[[i]][,,2]))
# srs = Polygons(list(sr), paste(i))
poly = append(poly, sr)
}
}
# sp <- SpatialPolygons(poly)
# sps <- SpatialPolygonsDataFrame(sp,
#                                 data.frame(
#                                   X = rep(1, num_alerts)
#                                   )
#                                 )
# al <- raw_data$features$properties$event[is.na(raw_data$features$geometry$type)]
al <- raw_data$features$properties$event
return(list(alerts=al, shapes=poly))
}
api_warning_call_2()
runApp(".")
runApp(".")
