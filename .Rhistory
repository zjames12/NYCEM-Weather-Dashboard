while (length(raw_data) == 1 && cnt < 4) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
if (length(raw_data) != 1){
temp = raw_data$properties$temperature$values$value
rh = raw_data$properties$relativeHumidity$values$value
rh_time = raw_data$properties$relativeHumidity$values$validTime
maxTemperature = raw_data$properties$maxTemperature$values$value
# maxTemperature_data = raw_data$properties$maxTemperature$values$validTime
minTemperature = raw_data$properties$minTemperature$values$value
apparentTemperature = raw_data$properties$apparentTemperature$values$value
wetBulbGlobeTemperature = raw_data$properties$maxTemperature$values$value
heatIndex = raw_data$properties$maxTemperature$values$value
windChill = raw_data$properties$maxTemperature$values$value
skyCover = raw_data$properties$maxTemperature$values$value
windDirection = raw_data$properties$maxTemperature$values$value
windSpeed = raw_data$properties$maxTemperature$values$value
windGust = raw_data$properties$maxTemperature$values$value
probabilityOfPrecipitation = raw_data$properties$maxTemperature$values$value
quantitativePrecipitation = raw_data$properties$maxTemperature$values$value
iceAccumulation = raw_data$properties$maxTemperature$values$value
snowfallAmount = raw_data$properties$maxTemperature$values$value
snowLevel = raw_data$properties$maxTemperature$values$value
ceilingHeight = raw_data$properties$maxTemperature$values$value
visibility = raw_data$properties$maxTemperature$values$value
transportWindSpeed = raw_data$properties$maxTemperature$values$value
transportWindDirection = raw_data$properties$maxTemperature$values$value
mixingHeight = raw_data$properties$maxTemperature$values$value
hainesIndex = raw_data$properties$maxTemperature$values$value
lightningActivityLevel = raw_data$properties$maxTemperature$values$value
sr = Polygon(cbind(raw_data$geometry$coordinates[,,1], raw_data$geometry$coordinates[,,2]))
srs = Polygons(list(sr), paste(i))
poly = append(poly, srs)
# print(length(temp))
temp_data[i,] = temp[1:60]
rh_data[i,] = rh[1:60]
minTemperature_data[i,] = minTemperature[1:8]
maxTemperature_data[i,] = maxTemperature[1:8]
success_cnt = success_cnt + 1
}
# setTxtProgressBar(pb,i)
}
sp <- SpatialPolygons(poly, 1:success_cnt)
dfd <- data.frame(temp_data[,1],rh_data[,1],
maxTemperature_data[,1], minTemperature_data[,1])
dfdt <- dfd[!is.na(dfd[,1]),]
colnames(dfdt) <- c("temp", "rh",
"maxTemp", "minTemp")
Xval <- grid_points$X[!is.na(dfd[,1])]
Yval <- grid_points$Y[!is.na(dfd[,1])]
sps <- SpatialPolygonsDataFrame(sp,
data.frame(dfdt, X = Xval, Y=Yval,
row.names = row.names(sp)))
# ret <- list(temp_data, rh_data, sps)
# names(ret) <- c("temp", "rh_data", "poly")
return(sps)
}
t <- proc.time()
layer_data <- call_api_2()
e <- proc.time()
e - t
leaflet_plot <- function(layer_data, nyc_data, field){
if (field == "Temperature"){
data_to_plot = layer_data$temp
labels <- sprintf(
"<strong>%.0f&degC</strong>",
layer_data$temp
) %>% lapply(htmltools::HTML)
# bins <- 0:11 *.5 + 14
# pal <- colorBin("Spectral", domain = layer_data$temp, bins = bins)
pal <- colorNumeric(palette = "Spectral", domain = data_to_plot, reverse = F)
legend_title = "&degC"
legend_values = data_to_plot
}
else if (field == "Relative Humidity") {
data_to_plot = layer_data$rh
labels <- sprintf(
"<strong>%.0f&#37</strong>",
layer_data$rh
) %>% lapply(htmltools::HTML)
pal <- colorNumeric(palette = "Greens", domain = data_to_plot)
legend_title <- "&#37"
legend_values = data_to_plot
}
else if (field == "Max. Temperature") {
data_to_plot = layer_data$rh
labels <- sprintf(
"<strong>%.0f&degC</strong>",
layer_data$maxTemp
) %>% lapply(htmltools::HTML)
bins <- 0:10 * 10
pal <- colorBin("Greens", domain = data_to_plot, bins = bins)
legend_title = "&degC"
legend_values = data_to_plot
}
else if (field == "Min. Temperature") {
data_to_plot = layer_data$rh
labels <- sprintf(
"<strong>%.0f&degC</strong>",
layer_data$minTemp
) %>% lapply(htmltools::HTML)
bins <- 0:10 * 10
pal <- colorBin("Greens", domain = data_to_plot, bins = bins)
legend_title = "&degC"
legend_values = data_to_plot
}
else {
data_to_plot = layer_data$rh
labels <- sprintf(
"<strong>%s, %s</strong>",
layer_data$X, layer_data$Y
) %>% lapply(htmltools::HTML)
bins <- 0:10 * 10
pal <- colorBin("Spectral", domain = layer_data$temp, bins = bins)
legend_title <- "&#37"
legend_values = data_to_plot
}
m <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, #GeoportailFrance.orthos,
options = providerTileOptions(minZoom = 9, maxZoom = 12)) %>%
addPolygons(data = layer_data,
fillColor = ~pal(data_to_plot),
fillOpacity = 0.7,
weight = 2,
opacity = .01,
color = "white",
dashArray = "3",
highlightOptions = highlightOptions(
weight = .1,
color = "#666",
dashArray = "",
fillOpacity = .7,
fillColor = "#666",
opacity = 1),
label = labels,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "15px",
direction = "auto"))%>%
addPolylines(data = nyc_data,
weight = 1) %>%
addLegend("bottomright",pal = pal, values = legend_values,
opacity = 1, title = legend_title)
return(m)
}
leaflet_plot(layer_data, nyc_data, "Temperature")
nyc_data <- nyc_outline()
leaflet_plot(layer_data, nyc_data, "Temperature")
api_call_central_park <- function(query, check, num_attempts = 10){
query <- "https://api.weather.gov/gridpoints/OKX/34,38"
cnt = 1
while (length(raw_data) == 1 && cnt < num_attempts) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
if (length(raw_data) == 1){
check = T
}
return(raw_data)
}
api_call_central_park <- function(check, num_attempts = 10){
query <- "https://api.weather.gov/gridpoints/OKX/34,38"
cnt = 1
while (length(raw_data) == 1 && cnt < num_attempts) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
if (length(raw_data) == 1){
check = T
}
return(raw_data)
}
api_call_central_park <- function(check, num_attempts = 10){
query <- "https://api.weather.gov/gridpoints/OKX/34,38"
cnt = 1
while (length(raw_data) == 1 && cnt < num_attempts) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
return(raw_data)
}
api_call_central_park <- function(num_attempts = 10){
query <- "https://api.weather.gov/gridpoints/OKX/34,38"
cnt = 1
while (length(raw_data) == 1 && cnt < num_attempts) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
return(raw_data)
}
df <- api_call_central_park()
api_call_central_park <- function(num_attempts = 10){
query <- "https://api.weather.gov/gridpoints/OKX/34,38"
cnt = 1
raw_data = NA
while (length(raw_data) == 1 && cnt < num_attempts) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
return(raw_data)
}
api_call_central_park <- function(num_attempts = 10){
query <- "https://api.weather.gov/gridpoints/OKX/34,38"
cnt = 1
raw_data = NA
while (length(raw_data) == 1 && cnt < num_attempts) {
raw_data <- tryCatch(
{
jsonlite::fromJSON(query)
},
warning=function(cond) {
suppressWarnings({
# message(paste("URL caused a warning:", url))
# message("Here's the original warning message:")
# message(cond)
# Choose a return value in case of warning
return(NA)
})
},
error=function(cond) {
# message(paste("URL does not seem to exist:", query))
# message("Here's the original error message:")
# message(cond)
# Choose a return value in case of error
return(NA)
})
cnt = cnt + 1
}
return(raw_data)
}
df <- api_call_central_park()
df$properties$maxTemperature$values
df$properties$apparentTemperature$values
df$properties$maxTemperature$values
library(formattable)
install.packages("formattable")
library(formattable)
runApp(".")
library(shinydashboard)
runApp(".")
library(shiny)
runApp(".")
data.frame(X=c(1,2,3),Y=c(4,5,6))
runApp(".")
runApp(".")
runApp(".")
runApp(".")
formattable(
data.frame(id = 1:5,
prev_score = c(10, 8, 6, 8, 8),
cur_score = c(8, 9, 7, 8, 9),
change = c(-2, 1, 1, 0, 1))
)
datatable(
data.frame(id = 1:5,
prev_score = c(10, 8, 6, 8, 8),
cur_score = c(8, 9, 7, 8, 9),
change = c(-2, 1, 1, 0, 1))
)
runApp(".")
df
df$properties$maxTemperature
df$properties$maxTemperature$values
df$properties$minTemperature$values
table_df <- data.frame(matrix(nrow = 2, ncol = 7))
table_df[1,] <- df$properties$maxTemperature$values$value
table_df[2,] <- df$properties$minTemperature$values$value
table_df[1,] <- df$properties$maxTemperature$values$value[1:7]
table_df[2,] <- df$properties$minTemperature$values$value[1:7]
table_df
c_to_f <- function(df){
return(df * 9 / 5 + 32)
}
c_to_f(table_df)
c_to_f(table_df)
table_df
c_to_f <- function(df){
df = df * 9 / 5 + 32
}
c_to_f(table_df)
table_df
c_to_f <- function(df){
return(df * 9 / 5 + 32)
}
table_df = c_to_f(table_df)
table_df
df$properties$maxTemperature$values$validTime
formattable(
table_df
)
df$properties$minTemperature$values$validTime
df$properties$minTemperature$values$validTime[1:7]
tim <- df$properties$minTemperature$values$validTime[1:7]
substring(tim, 1, 10)
format(as.Date(substring(tim, 1, 10),"%Y-%m-%d"),"%b %d %Y")
format(as.Date(substring(tim, 1, 10),"%Y-%m-%d"),"%b %d")
dates <- format(as.Date(substring(tim, 1, 10),"%Y-%m-%d"),"%b %d")
colnames(table_df) <- dates
formattable(
table_df
)
table_df$field = c("Daily Max", "Daily Min")
formattable(
table_df
)
table_df <- data.frame(matrix(nrow = 2, ncol = 8))
table_df[,1] = c("Daily Max", "Daily Min")
table_df[1,2:7] <- df$properties$maxTemperature$values$value[1:7]
table_df[2,2:7] <- df$properties$minTemperature$values$value[1:7]
table_df = c_to_f(table_df)
tim <- df$properties$minTemperature$values$validTime[1:7]
dates <- format(as.Date(substring(tim, 1, 10),"%Y-%m-%d"),"%b %d")
colnames(table_df) <- dates
formattable(
table_df
)
table_df <- data.frame(matrix(nrow = 2, ncol = 8))
table_df[,1] = c("Daily Max", "Daily Min")
table_df[1,2:7] <- df$properties$maxTemperature$values$value[1:7]
df$properties$maxTemperature$values$value[1:7]
table_df[1,2:8] <- df$properties$maxTemperature$values$value[1:7]
table_df[2,2:8] <- df$properties$minTemperature$values$value[1:7]
table_df[,1] = c("Daily Max", "Daily Min")
table_df[1,2:8] <- c_to_f(df$properties$maxTemperature$values$value[1:7])
table_df[2,2:8] <- c_to_f(df$properties$minTemperature$values$value[1:7])
table_df
colnames(table_df)[2:8] <- dates
table_df
colnames(table_df)[1] <- ""
formattable(
table_df
)
colnames(table_df)[1] <- "o"
formattable(
table_df
)
colnames(table_df)[1] <- " "
formattable(
table_df
)
runApp(".")
df
df$properties$apparentTemperature$values$validTime
substring(df$properties$apparentTemperature$values$validTime, 1, 10)
t <- paste(substring(df$properties$apparentTemperature$values$validTime, 1, 10), " ", substring(layer_data$time, 12,19), sep = "")
t
t <- paste(substring(df$properties$apparentTemperature$values$validTime, 1, 10), " ", substring(df$properties$apparentTemperature$values$validTime, 12,19), sep = "")
t
df$properties$apparentTemperature$values$value
plot_dat <- data.frame(time = t, temp = df$properties$apparentTemperature$values$value)
plot_dat <- data.frame(time = t, temp = df$properties$apparentTemperature$values$value)
plot_dat
ggplot(plot_dat, aes(x=time, y=temp)) +
geom_line() +
xlab("")
t <- as.Date(t)
plot_dat <- data.frame(time = t, temp = df$properties$apparentTemperature$values$value)
ggplot(plot_dat, aes(x=time, y=temp)) +
geom_line() +
xlab("")
t
t <- paste(
substring(df$properties$apparentTemperature$values$validTime, 1, 10),
" ",
substring(df$properties$apparentTemperature$values$validTime, 12,19),
sep = "")
head(t)
t <- as.Date(t, "%Y-%m-%d %h %m %s")
t
t <- paste(
substring(df$properties$apparentTemperature$values$validTime, 1, 10),
" ",
substring(df$properties$apparentTemperature$values$validTime, 12,19),
sep = "")
head(t)
ft <- as.Date(t, "%Y-%m-%d %h:%m:%s")
ft
ft <- as.POSIXlt(t)
head(ft)
plot_dat <- data.frame(time = ft, temp = df$properties$apparentTemperature$values$value)
ggplot(plot_dat, aes(x=time, y=temp)) +
geom_line() +
xlab("")
t <- paste(
substring(df$properties$apparentTemperature$values$validTime, 1, 10),
" ",
substring(df$properties$apparentTemperature$values$validTime, 12,19),
sep = "")
ft <- as.POSIXlt(t)
plot_dat <- data.frame(time = ft, temp = c_to_f(df$properties$apparentTemperature$values$value))
ggplot(plot_dat, aes(x=time, y=temp)) +
geom_line() +
xlab("") + ylab("Temperature")
runApp(".")
runApp(".")
runApp(".")
runApp(".")
